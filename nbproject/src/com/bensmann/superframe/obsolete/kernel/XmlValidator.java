package com.bensmann.superframe.obsolete.kernel;

import java.io.InputStream;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import com.bensmann.superframe.java.LangUtil;

/**
 * @author mm $Id: XmlValidator.java,v 1.1 2005/07/19 15:51:39 rb Exp $
 * 
 * Validate a xml file against the dtd
 */
public class XmlValidator extends DefaultHandler {

	private boolean validate = true;

	/**
	 * Constructor
	 */
	public XmlValidator() {
	}

	/**
	 * Constructor
	 * 
	 * @param fileName
	 */
	public XmlValidator(String fileName) {
		fileCheck(fileName);
	}

	/**
	 * Validiert den übergebenen String gegenüber der DTD
	 * 
	 * @param ta
	 * @return
	 */
	public boolean elementCheckStr(String ta) {

		//	Use an instance of ourselves as the SAX event handler
		DefaultHandler handler = new DefaultHandler();
		//new XmlValidationChecker();

		// Use the validating parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setValidating(getValidate());
		factory.setNamespaceAware(true);

		try {
			// Set up output stream
			//Writer out = new OutputStreamWriter(System.out, "UTF8");

			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(ta, handler);
		}

		catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println(
				"\n** Parsing error"
					+ ", line "
					+ spe.getLineNumber()
					+ ", uri "
					+ spe.getSystemId());
			System.out.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		}
		catch (Exception e) {
			LangUtil.consoleDebug(
				true,
				"Document is not a valid xml document: " + e.getMessage());
		}

		return true;
	}

	/**
	 * Validiert den angegebenen Dateinamen gegenüber der DTD
	 * 
	 * @param fileName
	 * @return
	 */
	public boolean fileCheck(String fileName) {

		//	Use an instance of ourselves as the SAX event handler
		DefaultHandler handler = new DefaultHandler();
		//new XmlValidationChecker();

		// Use the validating parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setValidating(getValidate());
		factory.setNamespaceAware(true);

		try {
			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(fileName, handler);
		}

		catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println(
				"\nParsing error"
					+ ", line "
					+ spe.getLineNumber()
					+ ", uri "
					+ spe.getSystemId());
			//System.out.println(" " + spe.getMessage());

			// Use the contained exception, if any
			/*
			 * Exception x = spe; if (spe.getException() != null) x =
			 * spe.getException();
			 */

		}
		catch (Exception e) {
			LangUtil.consoleDebug(
				true,
				"Document is not a valid xml document: " + e.getMessage());
		}
		return true;
	}

	/**
	 * Validiert den angegebenen Dateinamen gegenüber der DTD und gibt
	 * die Fehlermeldung als String zurück.
	 * 
	 * @param fileName
	 * @return String Zeile in der der Fehler aufgetreten ist.
	 */
	public String getErrorLine(InputStream is, String string) {

		//	Use an instance of ourselves as the SAX event handler
		DefaultHandler handler = new DefaultHandler();
		String errorLine = "";

		// Use the validating parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setValidating(getValidate());
		factory.setNamespaceAware(true);

		try {
			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(is, handler);
		}

		catch (SAXParseException spe) {
			// Error generated by the parser
			errorLine =
				"\nBitte überprüfen Sie die Datei "
					+ string
					+ "\nIn Zeile "
					+ spe.getLineNumber()
					+ " ist ein Fehler aufgetreten.\n";
		}
		catch (Exception e) {
			LangUtil.consoleDebug(
				true,
				"Document is not a valid xml document: " + e.getMessage());
		}
		return errorLine;
	}

	/**
	 * true by default.
	 * 
	 * @param validate
	 *            The validation to set.
	 */
	public void setValidate(boolean validate) {
		this.validate = validate;
	}

	/**
	 * @return validation
	 */
	public boolean getValidate() {
		return validate;
	}

	/**
	 * Validierungsfehler werden als fatal behandelt
	 */
	public void error(SAXParseException e) throws SAXParseException {
		throw e;
	}

	/**
	 * Eine Hilfe zur Benutzung der Klasse, falls man falsche Parameter
	 * angegeben hat.
	 */
	public static void usage() {
		System.err.println("Usage: java XmlValidationChecker XMLfilename");
		System.exit(1);
	}

	/**
	 * main Methode zum testen des Validation Checkers.
	 * 
	 * @param argv
	 */
	public static void main(String argv[]) {

		Boot.printCopyright("XML VALIDATION CHECKER");

		String filename = "src/core/com/wanci/dmerce/res/workflows.xml";
		XmlValidator check = new XmlValidator(filename);
	}
}